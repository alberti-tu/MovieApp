name: Deploy application

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'src/**'

jobs:
  settings:
    name: App version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.app.outputs.value }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: latest

    - name: Get minimum version
      id: minimum_version
      run: echo "value=`npm pkg get version`" >> "$GITHUB_OUTPUT"

    - name: Get current version
      uses: reecetech/version-increment@2023.4.1
      id: current_version
      with:
        scheme: semver
        increment: patch

    - name: Set new version
      id: app
      run: echo "value=`./version_manager.sh ${{ steps.minimum_version.outputs.value }} ${{ steps.current_version.outputs.current-version }}`" >> "$GITHUB_OUTPUT"

  setup:
    name: Set up
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: latest

    - name: Cache NPM dependencies
      uses: actions/cache@v3
      id: cache-node
      with:
        path: node_modules
        key: node-${{ hashFiles('/package-lock.json') }}

    - name: Install dependencies
      if: steps.cache-node.outputs.cache-hit != 'true'
      run: npm ci

  android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: [settings, setup]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: latest

    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: node-${{ hashFiles('/package-lock.json') }}

    - name: Set app version
      run: npm pkg set version=${{ needs.settings.outputs.version }}

    - name: Build code
      run: npm run android:release -- -PversionName=${{ needs.settings.outputs.version }} -PversionCode=${{ github.run_number }}

    - name: Set app file name
      run: mv android/app/build/outputs/apk/release/app-release.apk ./app-${{ needs.settings.outputs.version }}.apk

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: android
        path: '**.apk'

  ios:
    name: Build iPhone
    runs-on: macos-latest
    needs: [settings, setup]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: latest

    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: node-${{ hashFiles('/package-lock.json') }}

    - name: Install Cocoapod dependencies
      run: cd ios && pod install   

    - name: Set app version
      run: npm pkg set version=${{ needs.settings.outputs.version }}

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [settings, android]

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3

    - name: Upload release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ needs.settings.outputs.version }}
        tag_name: ${{ needs.settings.outputs.version }}
        token: ${{ secrets.GITHUB_TOKEN }}
        fail_on_unmatched_files: false
        files: |
          **/*.apk
